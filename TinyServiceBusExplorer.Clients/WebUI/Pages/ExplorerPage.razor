@page "/explorer"

@using TinyServiceBusExplorer.Core.Services
@using Azure.Messaging.ServiceBus
@using TinyServiceBusExplorer

@inject IServiceBusService serviceBusService
@inject NavigationManager navigationManager

<div class="row">

       <QueueList PeekTapped="@(async (x) => HandleQueueTapped(x))" DeadLetterTapped="@(async (x) => DeadLetterTapped(x))" />
  
    <div class="left">
        @if (string.IsNullOrEmpty(currentQueue))
        {
            <Span>Select a queue to show data</Span>
        }
        else
        {
            <h3>Messages</h3>
            <button class="btn btn-secondary" @onclick="@(async (x) => await LoadMessages())">Refresh</button><br /><br />
            <table class="table">
                <tbody>
                    <tr>
                        <th>Message id</th>
                        <th>Enqueued</th>
                        <th> </th>
                        @if(isDeadLetter)
                        {
                            <th> </th>
                        }
                    </tr>

                    @foreach (var message in Messages)
                    {
                <tr>
                    <td>@message.MessageId</td>
                    <td>@FormatDate(message.EnqueuedTime)</td>
                    <td><button class="btn btn-primary" @onclick="@(x => Open(message))">Show</button></td>
                    @if (isDeadLetter)
                    {
                        <td><button class="btn btn-warning" @onclick="@(x => Open(message))">Edit</button></td>
                    }
                </tr>
                    }
                </tbody>
            </table>
        }
    </div>
</div>

@code {

    private List<ServiceBusReceivedMessage> Messages { get; } = new List<ServiceBusReceivedMessage>();

    private string currentQueue = string.Empty;

    private bool isDeadLetter = false;

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if(ConnectionState.CurrentQueue != null)
        {
            currentQueue = ConnectionState.CurrentQueue;

            await LoadMessages();
        }
    }

    public async Task HandleQueueTapped(string queueName)
    {
        currentQueue = queueName;

        await LoadMessages();
    }

    public async Task DeadLetterTapped(string queueName)
    {
        isDeadLetter = true;
        currentQueue = queueName;

        await LoadDeadLetterMessages();
    }


    private async Task LoadDeadLetterMessages()
    {
        Messages.Clear();

        var messages = await serviceBusService.PeekDeadLetter(currentQueue);

        Messages.AddRange(messages);

        MessageState.Messages = messages;

        StateHasChanged();
    }

    private async Task LoadMessages()
    {
        Messages.Clear();

        var messages = await serviceBusService.Peek(currentQueue);

        Messages.AddRange(messages);

        MessageState.Messages = messages;

        StateHasChanged();
    }

    public async Task Open(ServiceBusReceivedMessage message)
    {
        navigationManager.NavigateTo($"/message/{message.MessageId}");
    }

    public string FormatDate(DateTimeOffset date)
    {
        var timeElapsed = DateTimeOffset.Now - date;

        if (timeElapsed.TotalSeconds < 60)
        {
            return $"{timeElapsed.TotalSeconds.ToString("0")} s ago";
        }

        if (timeElapsed.TotalMinutes < 60)
        {
            return $"{timeElapsed.Minutes.ToString("0")} m ago";
        }

        if (timeElapsed.TotalHours < 24)
        {
            return $"{timeElapsed.TotalHours.ToString("0")} h ago";
        }

        if (timeElapsed.TotalHours >= 24 && timeElapsed.TotalHours < 48)
        {
            return $"Yesterday";
        }

        return date.ToString();
    }
}
